// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cfc.proto

package cfcpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
	proto1 "owl/common/proto"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OwlCfcService service

func NewOwlCfcServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OwlCfcService service

type OwlCfcService interface {
	// RegisterAgent 客户端注册
	RegisterAgent(ctx context.Context, in *proto1.AgentInfo, opts ...client.CallOption) (*emptypb.Empty, error)
	// ListAgentPlugins 列出客户端需要执行的插件
	ListAgentPlugins(ctx context.Context, in *proto1.HostIdReq, opts ...client.CallOption) (*proto1.Plugins, error)
	// ReceiveAgentHeartbeat 接收客户端上报的心跳
	ReceiveAgentHeartbeat(ctx context.Context, in *proto1.AgentInfo, opts ...client.CallOption) (*emptypb.Empty, error)
	// ReceiveAgentMetric 接收客户端上报的Metric
	ReceiveAgentMetric(ctx context.Context, in *proto1.Metric, opts ...client.CallOption) (*emptypb.Empty, error)
	// ReceiveAgentMetrics 接收客户端上报的批量Metric
	ReceiveAgentMetrics(ctx context.Context, in *proto1.Metrics, opts ...client.CallOption) (*emptypb.Empty, error)
}

type owlCfcService struct {
	c    client.Client
	name string
}

func NewOwlCfcService(name string, c client.Client) OwlCfcService {
	return &owlCfcService{
		c:    c,
		name: name,
	}
}

func (c *owlCfcService) RegisterAgent(ctx context.Context, in *proto1.AgentInfo, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "OwlCfcService.RegisterAgent", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *owlCfcService) ListAgentPlugins(ctx context.Context, in *proto1.HostIdReq, opts ...client.CallOption) (*proto1.Plugins, error) {
	req := c.c.NewRequest(c.name, "OwlCfcService.ListAgentPlugins", in)
	out := new(proto1.Plugins)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *owlCfcService) ReceiveAgentHeartbeat(ctx context.Context, in *proto1.AgentInfo, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "OwlCfcService.ReceiveAgentHeartbeat", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *owlCfcService) ReceiveAgentMetric(ctx context.Context, in *proto1.Metric, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "OwlCfcService.ReceiveAgentMetric", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *owlCfcService) ReceiveAgentMetrics(ctx context.Context, in *proto1.Metrics, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "OwlCfcService.ReceiveAgentMetrics", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OwlCfcService service

type OwlCfcServiceHandler interface {
	// RegisterAgent 客户端注册
	RegisterAgent(context.Context, *proto1.AgentInfo, *emptypb.Empty) error
	// ListAgentPlugins 列出客户端需要执行的插件
	ListAgentPlugins(context.Context, *proto1.HostIdReq, *proto1.Plugins) error
	// ReceiveAgentHeartbeat 接收客户端上报的心跳
	ReceiveAgentHeartbeat(context.Context, *proto1.AgentInfo, *emptypb.Empty) error
	// ReceiveAgentMetric 接收客户端上报的Metric
	ReceiveAgentMetric(context.Context, *proto1.Metric, *emptypb.Empty) error
	// ReceiveAgentMetrics 接收客户端上报的批量Metric
	ReceiveAgentMetrics(context.Context, *proto1.Metrics, *emptypb.Empty) error
}

func RegisterOwlCfcServiceHandler(s server.Server, hdlr OwlCfcServiceHandler, opts ...server.HandlerOption) error {
	type owlCfcService interface {
		RegisterAgent(ctx context.Context, in *proto1.AgentInfo, out *emptypb.Empty) error
		ListAgentPlugins(ctx context.Context, in *proto1.HostIdReq, out *proto1.Plugins) error
		ReceiveAgentHeartbeat(ctx context.Context, in *proto1.AgentInfo, out *emptypb.Empty) error
		ReceiveAgentMetric(ctx context.Context, in *proto1.Metric, out *emptypb.Empty) error
		ReceiveAgentMetrics(ctx context.Context, in *proto1.Metrics, out *emptypb.Empty) error
	}
	type OwlCfcService struct {
		owlCfcService
	}
	h := &owlCfcServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OwlCfcService{h}, opts...))
}

type owlCfcServiceHandler struct {
	OwlCfcServiceHandler
}

func (h *owlCfcServiceHandler) RegisterAgent(ctx context.Context, in *proto1.AgentInfo, out *emptypb.Empty) error {
	return h.OwlCfcServiceHandler.RegisterAgent(ctx, in, out)
}

func (h *owlCfcServiceHandler) ListAgentPlugins(ctx context.Context, in *proto1.HostIdReq, out *proto1.Plugins) error {
	return h.OwlCfcServiceHandler.ListAgentPlugins(ctx, in, out)
}

func (h *owlCfcServiceHandler) ReceiveAgentHeartbeat(ctx context.Context, in *proto1.AgentInfo, out *emptypb.Empty) error {
	return h.OwlCfcServiceHandler.ReceiveAgentHeartbeat(ctx, in, out)
}

func (h *owlCfcServiceHandler) ReceiveAgentMetric(ctx context.Context, in *proto1.Metric, out *emptypb.Empty) error {
	return h.OwlCfcServiceHandler.ReceiveAgentMetric(ctx, in, out)
}

func (h *owlCfcServiceHandler) ReceiveAgentMetrics(ctx context.Context, in *proto1.Metrics, out *emptypb.Empty) error {
	return h.OwlCfcServiceHandler.ReceiveAgentMetrics(ctx, in, out)
}
